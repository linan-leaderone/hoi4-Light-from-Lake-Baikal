### TNO Laws
### Economic Laws
### ALL LAW EFFECTS MOVED TO DYNAMIC MODIFIERS
ideas = {
	tno_trade_laws = {
		law = yes
		tno_trade_laws_not_applicable = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_trade_laws_not_applicable"
				tno_trade_laws_not_applicable_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_trade_laws_free_trade = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_trade_laws_free_trade"
				tno_trade_laws_free_trade_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_trade_laws_export_focus = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_trade_laws_export_focus"
				tno_trade_laws_export_focus_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			default = yes
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_trade_laws_limited_exports = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_trade_laws_limited_exports"
				tno_trade_laws_limited_exports_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_trade_laws_closed_economy = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_trade_laws_closed_economy"
				tno_trade_laws_closed_economy_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {
				# min_export = 0
			}
			cancel_if_invalid = no
		}
	}
	tno_income_taxation = {
		law = yes
		tno_income_taxation_not_applicable = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_income_taxation_not_applicable"
				tno_income_taxation_not_applicable_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_income_taxation_elite_tax_exemptions = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_income_taxation_elite_tax_exemptions"
				tno_income_taxation_elite_tax_exemptions_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }
			#cancel = { NOT = { econ_can_use_economy_system = yes } }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_income_taxation_tax_havens = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_income_taxation_tax_havens"
				tno_income_taxation_tax_havens_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }
			#cancel = { NOT = { econ_can_use_economy_system = yes } }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_income_taxation_low_income_weighted = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_income_taxation_low_income_weighted"
				tno_income_taxation_low_income_weighted_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			default = yes
			available = { always = no }
			#cancel = { NOT = { econ_can_use_economy_system = yes } }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_income_taxation_flat_taxes = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_income_taxation_flat_taxes"
				tno_income_taxation_flat_taxes_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }
			#cancel = { NOT = { econ_can_use_economy_system = yes } }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_income_taxation_high_income_weighted = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_income_taxation_high_income_weighted"
				tno_income_taxation_high_income_weighted_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }
			#cancel = { NOT = { econ_can_use_economy_system = yes } }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_income_taxation_negative_taxation = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_income_taxation_negative_taxation"
				tno_income_taxation_negative_taxation_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }
			#cancel = { NOT = { econ_can_use_economy_system = yes } }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
	}
	tno_minimum_wage = {
		law = yes
		tno_minimum_wage_not_applicable = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_minimum_wage_not_applicable"
				tno_minimum_wage_not_applicable_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_minimum_wage_no_minimum_wage = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_minimum_wage_no_minimum_wage"
				tno_minimum_wage_no_minimum_wage_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			default = yes
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_minimum_wage_trinket_minimum_wage = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_minimum_wage_trinket_minimum_wage"
				tno_minimum_wage_trinket_minimum_wage_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_minimum_wage_low_minimum_wage = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_minimum_wage_low_minimum_wage"
				tno_minimum_wage_low_minimum_wage_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {

			}
			cancel_if_invalid = no
		}
		tno_minimum_wage_acceptable_minimum = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_minimum_wage_acceptable_minimum"
				tno_minimum_wage_acceptable_minimum_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_minimum_wage_good_minimum_wage = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_minimum_wage_good_minimum_wage"
				tno_minimum_wage_good_minimum_wage_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_minimum_wage_annual_wage = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_minimum_wage_annual_wage"
				tno_minimum_wage_annual_wage_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
	}
	tno_max_workhours = {
		law = yes
		tno_max_workhours_not_applicable = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_max_workhours_not_applicable"
				tno_max_workhours_not_applicable_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_max_workhours_unlimited_work_day = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_max_workhours_unlimited_work_day"
				tno_max_workhours_unlimited_work_day_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			default = yes
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_max_workhours_14_hour_work_day = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_max_workhours_14_hour_work_day"
				tno_max_workhours_14_hour_work_day_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_max_workhours_12_hour_work_day = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_max_workhours_12_hour_work_day"
				tno_max_workhours_12_hour_work_day_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {

			}
			cancel_if_invalid = no
		}
		tno_max_workhours_10_hour_work_day = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_max_workhours_10_hour_work_day"
				tno_max_workhours_10_hour_work_day_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_max_workhours_8_hour_work_day = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_max_workhours_8_hour_work_day"
				tno_max_workhours_8_hour_work_day_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_max_workhours_6_hour_work_day = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_max_workhours_6_hour_work_day"
				tno_max_workhours_6_hour_work_day_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
	}
	tno_pensions = {
		law = yes
		tno_pensions_not_applicable = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_pensions_not_applicable"
				tno_pensions_not_applicable_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_pensions_no_pensions = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_pensions_no_pensions"
				tno_pensions_no_pensions_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			default = yes
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_pensions_trinket_pensions = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_pensions_trinket_pensions"
				tno_pensions_trinket_pensions_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_pensions_low_pensions = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_pensions_low_pensions"
				tno_pensions_low_pensions_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_pensions_acceptable_pensions = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_pensions_acceptable_pensions"
				tno_pensions_acceptable_pensions_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_pensions_good_pensions = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_pensions_good_pensions"
				tno_pensions_good_pensions_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
	}
	tno_unemployment = {
		law = yes
		tno_unemployment_not_applicable = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_unemployment_not_applicable"
				tno_unemployment_not_applicable_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_unemployment_no_subsidies = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_unemployment_no_subsidies"
				tno_unemployment_no_subsidies_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			default = yes
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_unemployment_trinket_subsidies = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_unemployment_trinket_subsidies"
				tno_unemployment_trinket_subsidies_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_unemployment_low_subsidies = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_unemployment_low_subsidies"
				tno_unemployment_low_subsidies_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_unemployment_moderate_subsidies = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_unemployment_moderate_subsidies"
				tno_unemployment_moderate_subsidies_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_unemployment_generous_subsidies = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_unemployment_generous_subsidies"
				tno_unemployment_generous_subsidies_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
		tno_unemployment_full_employment_policy = {
			on_add = {
				log = "[GetDateText]: [Root.GetName]: add idea tno_unemployment_full_employment_policy"
				tno_unemployment_full_employment_policy_effect = yes
				TNO_update_policy_effectiveness = yes
			}
			available = { always = no }

			removal_cost = -1
			ledger = civilian
			modifier = {  }
			cancel_if_invalid = no
		}
	}
}
