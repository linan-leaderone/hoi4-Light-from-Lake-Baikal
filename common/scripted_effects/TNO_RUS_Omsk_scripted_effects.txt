##########################################
##  ██████╗ ███╗   ███╗ ██████╗██╗  ██╗ ##
## ██╔═══██╗████╗ ████║██╔════╝██║ ██╔╝ ##
## ██║   ██║██╔████╔██║██║     █████╔╝  ##
## ██║   ██║██║╚██╔╝██║██║     ██╔═██╗  ##
## ╚██████╔╝██║ ╚═╝ ██║╚██████╗██║  ██╗ ##
##  ╚═════╝ ╚═╝     ╚═╝ ╚═════╝╚═╝  ╚═╝ ##
##########################################
# |====[ Scripted Effects ]====|
#
# // INDEX // #
# /// Gauntlet /// # This is more of a placeholder mech before we give Omsk a throughout mechanical look and add details to the plot. Stay tuned! - scoodoop, Russia Lead
# OMS_Gauntlet_Enable
# OMS_Gauntlet_Disable
# OMS_Gauntlet_City_Pacify
# OMS_Gauntlet_ControlCap_Y_Calc
# OMS_Gauntlet_HealthCap_Y_Calc
# OMS_Gauntlet_NewGuard_UnlockedNum_Calc
# OMS_Gauntlet_NewGuardButtonRecruit
# OMS_Gauntlet_NewGuard_DismissNext
# OMS_Gauntlet_NewGuardButtonSupport
# OMS_Gauntlet_City_Health_Add
# OMS_Gauntlet_RandomCity_Health_Add
# OMS_Gauntlet_EveryCity_Health_Add
# OMS_Gauntlet_City_HealthLoss_Multiply
# OMS_Gauntlet_RandomCity_HealthLoss_Multiply
# OMS_Gauntlet_EveryCity_HealthLoss_Multiply
# OMS_Gauntlet_City_HealthCap_Add
# OMS_Gauntlet_RandomCity_HealthCap_Add
# OMS_Gauntlet_EveryCity_HealthCap_Add
# OMS_Gauntlet_City_Control_Add
# OMS_Gauntlet_RandomCity_Control_Add
# OMS_Gauntlet_EveryCity_Control_Add
# OMS_Gauntlet_City_ControlLoss_Multiply
# OMS_Gauntlet_RandomCity_ControlLoss_Multiply
# OMS_Gauntlet_EveryCity_ControlLoss_Multiply
# OMS_Gauntlet_City_ControlCap_Add
# OMS_Gauntlet_RandomCity_ControlCap_Add
# OMS_Gauntlet_EveryCity_ControlCap_Add
# OMS_Gauntlet_NewGuard_Entrenchment_Add
# OMS_Gauntlet_EveryNewGuard_Entrenchment_Add
# OMS_Gauntlet_NewGuard_RecruitCost_Multiply
# OMS_Gauntlet_NewGuard_SupportCost_Multiply
# /// Batov's Insurgency /// #

# /// Gauntlet /// #
OMS_Gauntlet_Enable = {
	# //// Main //// #
	custom_effect_tooltip = OMS_Gauntlet_Enable_Tt
	set_country_flag = OMS_Gauntlet_Enabled
	set_variable = { OMS_Gauntlet_Dirty = 0 }
	# //// Cities //// #
	# ///// Tara ///// #
	add_to_array = { OMS_Gauntlet_City_Status = 0 }
	add_to_array = { OMS_Gauntlet_City_Frame = 1 }
	add_to_array = { OMS_Gauntlet_City_Health = 86 }
	add_to_array = { OMS_Gauntlet_City_HealthLoss = -0.4 }
	add_to_array = { OMS_Gauntlet_City_HealthCap = 94 }
	add_to_array = { OMS_Gauntlet_City_HealthCap_Y = 0 }
	add_to_array = { OMS_Gauntlet_City_Control = 12 }
	add_to_array = { OMS_Gauntlet_City_ControlLoss = -0.5 }
	add_to_array = { OMS_Gauntlet_City_ControlCap = 24 }
	add_to_array = { OMS_Gauntlet_City_ControlCap_Y = 0 }
	# ///// Isilkul ///// #
	add_to_array = { OMS_Gauntlet_City_Status = 0 }
	add_to_array = { OMS_Gauntlet_City_Frame = 2 }
	add_to_array = { OMS_Gauntlet_City_Health = 66 }
	add_to_array = { OMS_Gauntlet_City_HealthLoss = -0.4 }
	add_to_array = { OMS_Gauntlet_City_HealthCap = 83 }
	add_to_array = { OMS_Gauntlet_City_HealthCap_Y = 0 }
	add_to_array = { OMS_Gauntlet_City_Control = 34 }
	add_to_array = { OMS_Gauntlet_City_ControlLoss = -0.3 }
	add_to_array = { OMS_Gauntlet_City_ControlCap = 70 }
	add_to_array = { OMS_Gauntlet_City_ControlCap_Y = 0 }
	OMS_Gauntlet_ControlCap_Y_Calc = yes
	OMS_Gauntlet_HealthCap_Y_Calc = yes
	# /// New Guard /// #
	add_to_array = { OMS_Gauntlet_NewGuard_ID = 0 }
	resize_array = { OMS_Gauntlet_NewGuard_ID = 5 }
	set_variable = { OMS_Gauntlet_NewGuard_ID^0 = 1 }
	add_to_array = { OMS_Gauntlet_NewGuard_Entrenchment = 0 }
	resize_array = { OMS_Gauntlet_NewGuard_Entrenchment = 5 }
	set_variable = { OMS_Gauntlet_NewGuard_Entrenchment^0 = 50 }
	OMS_Gauntlet_NewGuard_UnlockedNum_Calc = yes
	set_variable = { OMS_Gauntlet_NewGuard_RecruitCost = 10 }
	set_variable = { OMS_Gauntlet_NewGuard_SupportCost = 5 }
	# /// Decision Costs /// #
	set_variable = { OMS_Gauntlet_PacifyTaraCost = 15 }
	set_variable = { OMS_Gauntlet_PacifyIskilkulCost = 15 }
	hidden_effect = {
		activate_mission = OMS_Gauntlet_PulseControlLoss
		activate_mission = OMS_Gauntlet_PulseHealthLoss
		activate_mission = OMS_Gauntlet_PulseNewGuard
		activate_mission = OMS_Gauntlet_PulseFailstate
	}
}

OMS_Gauntlet_Disable = {
	custom_effect_tooltip = OMS_Gauntlet_Disable_Tt
	clr_country_flag = OMS_Gauntlet_Enabled
	clear_variable = OMS_Gauntlet_Dirty
	clear_array = OMS_Gauntlet_City_Status
	clear_array = OMS_Gauntlet_City_Frame
	clear_array = OMS_Gauntlet_City_Health
	clear_array = OMS_Gauntlet_City_HealthLoss
	clear_array = OMS_Gauntlet_City_HealthCap
	clear_array = OMS_Gauntlet_City_HealthCap_Y
	clear_array = OMS_Gauntlet_City_Control
	clear_array = OMS_Gauntlet_City_ControlLoss
	clear_array = OMS_Gauntlet_City_ControlCap
	clear_array = OMS_Gauntlet_City_ControlCap_Y
	clear_array = OMS_Gauntlet_NewGuard_ID
	clear_array = OMS_Gauntlet_NewGuard_Entrenchment
	clear_variable = OMS_Gauntlet_NewGuard_RecruitCost
	clear_variable = OMS_Gauntlet_NewGuard_SupportCost
	clear_variable = OMS_Gauntlet_PacifyTaraCost
	clear_variable = OMS_Gauntlet_PacifyIskilkulCost
	clr_country_flag = OMS_Gauntlet_InstigateInvestigations_Done
	clr_country_flag = OMS_Gauntlet_MoveTheFrontlinesInIskilkul_Done
	clr_country_flag = OMS_Gauntlet_MoveTheFrontlinesInTara_Done
}

OMS_Gauntlet_City_Pacify = {
	custom_effect_tooltip = OMS_Gauntlet_City_Pacify_Tt
	set_variable = { OMS_Gauntlet_City_Status^city = 1 }
	set_variable = { OMS_Gauntlet_City_Health^city = 0 }
	set_variable = { OMS_Gauntlet_City_HealthLoss^city = 0 }
	set_variable = { OMS_Gauntlet_City_Control^city = 0 }
	set_variable = { OMS_Gauntlet_City_ControlLoss^city = 0 }
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

OMS_Gauntlet_ControlCap_Y_Calc = {
	for_each_loop = {
		array = OMS_Gauntlet_City_ControlCap_Y
		set_variable = { OMS_Gauntlet_City_ControlCap_Y^i = 106 }
		set_temp_variable = { tempDisplay = OMS_Gauntlet_City_ControlCap^i }
		divide_temp_variable = { tempDisplay = 100 }
		multiply_variable = { OMS_Gauntlet_City_ControlCap_Y^i = tempDisplay }
		set_temp_variable = { x = 134 }
		subtract_from_temp_variable = { x = OMS_Gauntlet_City_ControlCap_Y^i }
		set_variable = { OMS_Gauntlet_City_ControlCap_Y^i = x }
		round_variable = OMS_Gauntlet_City_ControlCap_Y^i
	}
}

OMS_Gauntlet_HealthCap_Y_Calc = {
	for_each_loop = {
		array = OMS_Gauntlet_City_HealthCap_Y
		set_variable = { OMS_Gauntlet_City_HealthCap_Y^i = 106 }
		set_temp_variable = { tempDisplay = OMS_Gauntlet_City_HealthCap^i }
		divide_temp_variable = { tempDisplay = 100 }
		multiply_variable = { OMS_Gauntlet_City_HealthCap_Y^i = tempDisplay }
		set_temp_variable = { x = 134 }
		subtract_from_temp_variable = { x = OMS_Gauntlet_City_HealthCap_Y^i }
		set_variable = { OMS_Gauntlet_City_HealthCap_Y^i = x }
		round_variable = OMS_Gauntlet_City_HealthCap_Y^i
	}
}

OMS_Gauntlet_NewGuard_UnlockedNum_Calc = {
	clear_array = OMS_Gauntlet_NewGuard_Unlocked
	for_each_loop = {
		array = OMS_Gauntlet_NewGuard_ID
		if = {
			limit = { check_variable = { v > 0 } }
			add_to_array = { OMS_Gauntlet_NewGuard_Unlocked = 0 }
		}
	}
}

OMS_Gauntlet_NewGuardButtonRecruit = {
	if = {
		limit = {
			check_variable = {
				var = political_power
				value = OMS_Gauntlet_NewGuard_RecruitCost
				compare = greater_than_or_equals
			}
		}
		set_variable = { OMS_Gauntlet_NewGuard_ID^guard_idx = guard_idx }
		add_to_variable = { OMS_Gauntlet_NewGuard_ID^guard_idx = 1 }
		set_temp_variable = { cost = OMS_Gauntlet_NewGuard_RecruitCost }
		multiply_temp_variable = { cost = -1 }
		add_political_power = var:cost
		if = { # Evgeny Savintsev
			limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^guard_idx = 2 } }
			set_variable = { OMS_Gauntlet_NewGuard_Entrenchment^guard_idx = 12 }
			if = {
				limit = { NOT = { has_idea = OMS_Evgeny_Savintsev_hog } }
				remove_ideas_with_trait = head_of_government
				add_ideas = OMS_Evgeny_Savintsev_hog
				country_event = omsk.gauntlet.7
			}
		}
		else_if = { # Aleksandr Sakharovsky
			limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^guard_idx = 3 } }
			set_variable = { OMS_Gauntlet_NewGuard_Entrenchment^guard_idx = 64 }
			if = {
				limit = { NOT = { has_idea = OMS_Aleksandr_Sakharovsky_for } }
				remove_ideas_with_trait = foreign_minister
				add_ideas = OMS_Aleksandr_Sakharovsky_for
				country_event = omsk.gauntlet.6
			}
		}
		else_if = { # Evgeny Pitovranov
			limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^guard_idx = 4 } }
			set_variable = { OMS_Gauntlet_NewGuard_Entrenchment^guard_idx = 34 }
			if = {
				limit = { NOT = { has_idea = OMS_Evgeny_Pitovranov_eco } }
				remove_ideas_with_trait = economy_minister
				add_ideas = OMS_Evgeny_Pitovranov_eco
				country_event = omsk.43
			}
		}
		else_if = { # Yuriy Drozdov
			limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^guard_idx = 5 } }
			set_variable = { OMS_Gauntlet_NewGuard_Entrenchment^guard_idx = 23 }
			if = {
				limit = { NOT = { has_idea = OMS_Yuriy_Drozdov_sec } }
				remove_ideas_with_trait = security_minister
				add_ideas = OMS_Yuriy_Drozdov_sec
				country_event = omsk.40
			}
		}
		OMS_Gauntlet_NewGuard_UnlockedNum_Calc = yes
		add_to_variable = { OMS_Gauntlet_Dirty = 1 }
	}
}

OMS_Gauntlet_NewGuard_DismissNext = {
	if = {
		limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^4 > 0 } }
		set_temp_variable = { guard = 4 }
	}
	else_if = {
		limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^3 > 0 } }
		set_temp_variable = { guard = 3 }
	}
	else_if = {
		limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^2 > 0 } }
		set_temp_variable = { guard = 2 }
	}
	else_if = {
		limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^1 > 0 } }
		set_temp_variable = { guard = 1 }
	}
	else_if = {
		limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^0 > 0 } }
		set_temp_variable = { guard = 0 }
	}
	if = {
		limit = { check_variable = { guard > 0 } }
		custom_effect_tooltip = OMS_Gauntlet_NewGuard_DismissNext_Tt_Normal
		set_variable = { OMS_Gauntlet_NewGuard_ID^guard = 0 }
		set_variable = { OMS_Gauntlet_NewGuard_Entrenchment^guard = 0 }
		OMS_Gauntlet_NewGuard_UnlockedNum_Calc = yes
	}
	else = {
		custom_effect_tooltip = OMS_Gauntlet_NewGuard_DismissNext_Tt_Yazov
		add_political_power = -30
		add_command_power = -30
	}
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

OMS_Gauntlet_NewGuardButtonSupport = {
	if = {
		limit = {
			check_variable = {
				var = political_power
				value = OMS_Gauntlet_NewGuard_SupportCost
				compare = greater_than_or_equals
			}
		}
		set_temp_variable = { guard = guard_idx }
		set_temp_variable = { amount = 20 }
		OMS_Gauntlet_NewGuard_Entrenchment_Add = yes
		set_temp_variable = { cost = OMS_Gauntlet_NewGuard_SupportCost }
		multiply_temp_variable = { cost = -1 }
		add_political_power = var:cost
		add_to_variable = { OMS_Gauntlet_Dirty = 1 }
	}
}

OMS_Gauntlet_City_Health_Add = {
	custom_effect_tooltip = OMS_Gauntlet_City_Health_Add_Tt
	add_to_variable = { OMS_Gauntlet_City_Health^city = amount }
	clamp_variable = { var = OMS_Gauntlet_City_Health^city min = 0 max = OMS_Gauntlet_City_HealthCap^city }
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

OMS_Gauntlet_RandomCity_Health_Add = {
	custom_effect_tooltip = OMS_Gauntlet_RandomCity_Health_Add_Tt
	hidden_effect = {
		if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			random_list = {
				50 = {
					set_temp_variable = { city = 0 }
					OMS_Gauntlet_City_Health_Add = yes
				}
				50 = {
					set_temp_variable = { city = 1 }
					OMS_Gauntlet_City_Health_Add = yes
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
			}
			set_temp_variable = { city = 0 }
			OMS_Gauntlet_City_Health_Add = yes
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			set_temp_variable = { city = 1 }
			OMS_Gauntlet_City_Health_Add = yes
		}
	}
}

OMS_Gauntlet_EveryCity_Health_Add = {
	custom_effect_tooltip = OMS_Gauntlet_EveryCity_Health_Add_Tt
	hidden_effect = {
		for_each_loop = {
			array = OMS_Gauntlet_City_Status
			if = {
				limit = { check_variable = { v < 1 } }
				set_temp_variable = { city = i }
				OMS_Gauntlet_City_Health_Add = yes
			}
		}
	}
}

OMS_Gauntlet_City_HealthLoss_Multiply = {
	custom_effect_tooltip = OMS_Gauntlet_City_HealthLoss_Multiply_Tt
	set_temp_variable = { actual_amount = 1 }
	add_to_temp_variable = { actual_amount = amount }
	subtract_from_temp_variable = { actual_amount = amount }
	multiply_variable = { OMS_Gauntlet_City_HealthLoss^city = actual_amount }
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

OMS_Gauntlet_RandomCity_HealthLoss_Multiply = {
	custom_effect_tooltip = OMS_Gauntlet_RandomCity_HealthLoss_Multiply_Tt
	hidden_effect = {
		if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			random_list = {
				50 = {
					set_temp_variable = { city = 0 }
					OMS_Gauntlet_City_HealthLoss_Multiply = yes
				}
				50 = {
					set_temp_variable = { city = 1 }
					OMS_Gauntlet_City_HealthLoss_Multiply = yes
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
			}
			set_temp_variable = { city = 0 }
			OMS_Gauntlet_City_HealthLoss_Multiply = yes
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			set_temp_variable = { city = 1 }
			OMS_Gauntlet_City_HealthLoss_Multiply = yes
		}
	}
}

OMS_Gauntlet_EveryCity_HealthLoss_Multiply = {
	custom_effect_tooltip = OMS_Gauntlet_EveryCity_HealthLoss_Multiply_Tt
	hidden_effect = {
		for_each_loop = {
			array = OMS_Gauntlet_City_Status
			if = {
				limit = { check_variable = { v < 1 } }
				set_temp_variable = { city = i }
				OMS_Gauntlet_City_HealthLoss_Multiply = yes
			}
		}
	}
}

OMS_Gauntlet_City_HealthCap_Add = {
	custom_effect_tooltip = OMS_Gauntlet_City_HealthCap_Add_Tt
	add_to_variable = { OMS_Gauntlet_City_HealthCap^city = amount }
	clamp_variable = { var = OMS_Gauntlet_City_HealthCap^city min = 0 max = 100 }
	OMS_Gauntlet_HealthCap_Y_Calc = yes
	clamp_variable = { var = OMS_Gauntlet_City_Health^city min = 0 max = OMS_Gauntlet_City_HealthCap^city }
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

OMS_Gauntlet_RandomCity_HealthCap_Add = {
	custom_effect_tooltip = OMS_Gauntlet_RandomCity_HealthCap_Add_Tt
	hidden_effect = {
		if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			random_list = {
				50 = {
					set_temp_variable = { city = 0 }
					OMS_Gauntlet_City_HealthCap_Add = yes
				}
				50 = {
					set_temp_variable = { city = 1 }
					OMS_Gauntlet_City_HealthCap_Add = yes
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
			}
			set_temp_variable = { city = 0 }
			OMS_Gauntlet_City_HealthCap_Add = yes
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			set_temp_variable = { city = 1 }
			OMS_Gauntlet_City_HealthCap_Add = yes
		}
	}
}

OMS_Gauntlet_EveryCity_HealthCap_Add = {
	custom_effect_tooltip = OMS_Gauntlet_EveryCity_HealthCap_Add_Tt
	hidden_effect = {
		for_each_loop = {
			array = OMS_Gauntlet_City_Status
			if = {
				limit = { check_variable = { v < 1 } }
				set_temp_variable = { city = i }
				OMS_Gauntlet_City_HealthCap_Add = yes
			}
		}
	}
}

OMS_Gauntlet_City_Control_Add = {
	custom_effect_tooltip = OMS_Gauntlet_City_Control_Add_Tt
	add_to_variable = { OMS_Gauntlet_City_Control^city = amount }
	clamp_variable = { var = OMS_Gauntlet_City_Control^city min = 0 max = OMS_Gauntlet_City_ControlCap^city }
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

OMS_Gauntlet_RandomCity_Control_Add = {
	custom_effect_tooltip = OMS_Gauntlet_RandomCity_Control_Add_Tt
	hidden_effect = {
		if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			random_list = {
				50 = {
					set_temp_variable = { city = 0 }
					OMS_Gauntlet_City_Control_Add = yes
				}
				50 = {
					set_temp_variable = { city = 1 }
					OMS_Gauntlet_City_Control_Add = yes
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
			}
			set_temp_variable = { city = 0 }
			OMS_Gauntlet_City_Control_Add = yes
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			set_temp_variable = { city = 1 }
			OMS_Gauntlet_City_Control_Add = yes
		}
	}
}

OMS_Gauntlet_EveryCity_Control_Add = {
	custom_effect_tooltip = OMS_Gauntlet_EveryCity_Control_Add_Tt
	hidden_effect = {
		for_each_loop = {
			array = OMS_Gauntlet_City_Status
			if = {
				limit = { check_variable = { v < 1 } }
				set_temp_variable = { city = i }
				OMS_Gauntlet_City_Control_Add = yes
			}
		}
	}
}

OMS_Gauntlet_City_ControlLoss_Multiply = {
	custom_effect_tooltip = OMS_Gauntlet_City_ControlLoss_Multiply_Tt
	add_to_temp_variable = { actual_amount = amount }
	subtract_from_temp_variable = { actual_amount = amount }
	multiply_variable = { OMS_Gauntlet_City_ControlLoss^city = actual_amount }
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

OMS_Gauntlet_RandomCity_ControlLoss_Multiply = {
	custom_effect_tooltip = OMS_Gauntlet_RandomCity_ControlLoss_Multiply_Tt
	hidden_effect = {
		if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			random_list = {
				50 = {
					set_temp_variable = { city = 0 }
					OMS_Gauntlet_City_ControlLoss_Multiply = yes
				}
				50 = {
					set_temp_variable = { city = 1 }
					OMS_Gauntlet_City_ControlLoss_Multiply = yes
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
			}
			set_temp_variable = { city = 0 }
			OMS_Gauntlet_City_ControlLoss_Multiply = yes
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			set_temp_variable = { city = 1 }
			OMS_Gauntlet_City_ControlLoss_Multiply = yes
		}
	}
}

OMS_Gauntlet_EveryCity_ControlLoss_Multiply = {
	custom_effect_tooltip = OMS_Gauntlet_EveryCity_ControlLoss_Multiply_Tt
	hidden_effect = {
		for_each_loop = {
			array = OMS_Gauntlet_City_Status
			if = {
				limit = { check_variable = { v < 1 } }
				set_temp_variable = { city = i }
				OMS_Gauntlet_City_ControlLoss_Multiply = yes
			}
		}
	}
}

OMS_Gauntlet_City_ControlCap_Add = {
	custom_effect_tooltip = OMS_Gauntlet_City_ControlCap_Add_Tt
	add_to_variable = { OMS_Gauntlet_City_ControlCap^city = amount }
	clamp_variable = { var = OMS_Gauntlet_City_ControlCap^city min = 0 max = 100 }
	OMS_Gauntlet_ControlCap_Y_Calc = yes
	clamp_variable = { var = OMS_Gauntlet_City_Control^city min = 0 max = OMS_Gauntlet_City_ControlCap^city }
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

OMS_Gauntlet_RandomCity_ControlCap_Add = {
	custom_effect_tooltip = OMS_Gauntlet_RandomCity_ControlCap_Add_Tt
	hidden_effect = {
		if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			random_list = {
				50 = {
					set_temp_variable = { city = 0 }
					OMS_Gauntlet_City_ControlCap_Add = yes
				}
				50 = {
					set_temp_variable = { city = 1 }
					OMS_Gauntlet_City_ControlCap_Add = yes
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^0 < 1 }
			}
			set_temp_variable = { city = 0 }
			OMS_Gauntlet_City_ControlCap_Add = yes
		}
		else_if = {
			limit = {
				check_variable = { OMS_Gauntlet_City_Status^1 < 1 }
			}
			set_temp_variable = { city = 1 }
			OMS_Gauntlet_City_ControlCap_Add = yes
		}
	}
}

OMS_Gauntlet_EveryCity_ControlCap_Add = {
	custom_effect_tooltip = OMS_Gauntlet_EveryCity_ControlCap_Add_Tt
	hidden_effect = {
		for_each_loop = {
			array = OMS_Gauntlet_City_Status
			if = {
				limit = { check_variable = { v < 1 } }
				set_temp_variable = { city = i }
				OMS_Gauntlet_City_ControlCap_Add = yes
			}
		}
	}
}

OMS_Gauntlet_NewGuard_Entrenchment_Add = {
	if = {
		limit = { check_variable = { OMS_Gauntlet_NewGuard_ID^guard > 0 } }
		custom_effect_tooltip = OMS_Gauntlet_NewGuard_Entrenchment_Add_Tt
		add_to_variable = { OMS_Gauntlet_NewGuard_Entrenchment^guard = amount }
		clamp_variable = { var = OMS_Gauntlet_NewGuard_Entrenchment^guard min = 0 max = 100 }
		add_to_variable = { OMS_Gauntlet_Dirty = 1 }
	}
	else = {
		custom_effect_tooltip = OMS_Gauntlet_NewGuard_Entrenchment_Add_Tt_Locked
	}
}

OMS_Gauntlet_EveryNewGuard_Entrenchment_Add = {
	custom_effect_tooltip = OMS_Gauntlet_EveryNewGuard_Entrenchment_Add_Tt
	hidden_effect = {
		for_each_loop = {
			array = OMS_Gauntlet_NewGuard_ID
			if = {
				limit = { check_variable = { v > 0 } }
				set_temp_variable = { guard = i }
				OMS_Gauntlet_NewGuard_Entrenchment_Add = yes
			}
		}
	}
}

OMS_Gauntlet_NewGuard_RecruitCost_Multiply = {
	custom_effect_tooltip = OMS_Gauntlet_NewGuard_RecruitCost_Multiply_Tt
	set_temp_variable = { real_amount = 1 }
	add_to_temp_variable = { real_amount = amount }
	multiply_variable = { OMS_Gauntlet_NewGuard_RecruitCost = real_amount }
	clamp_variable = { var = OMS_Gauntlet_NewGuard_RecruitCost min = 1 }
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

OMS_Gauntlet_NewGuard_SupportCost_Multiply = {
	custom_effect_tooltip = OMS_Gauntlet_NewGuard_SupportCost_Multiply_Tt
	set_temp_variable = { real_amount = 1 }
	add_to_temp_variable = { real_amount = amount }
	multiply_variable = { OMS_Gauntlet_NewGuard_SupportCost = real_amount }
	clamp_variable = { var = OMS_Gauntlet_NewGuard_SupportCost min = 1 }
	add_to_variable = { OMS_Gauntlet_Dirty = 1 }
}

# /// Batov's Insurgency /// #
OMS_SE_insurgency_start = {
	custom_effect_tooltip = OMS_SE_insurgency_start_tt
	set_country_flag = OMS_batov_insurgency_active
	
	set_variable = { insurgency_controller = 0 }
	set_variable = { OMS_available_new_bases = 3 }
	set_variable = { AVAILABLE_BASES = 2 }
	set_variable = { OMS_batov_base_effectiveness = 0.05 }
	set_variable = { OMS_our_base_effectiveness = -0.05 }
	set_variable = { OMS_batov_timeout = 500 }
	hidden_effect = {
		add_popularity = {
			ideology = paternalism
			popularity = 0.3
		}
		set_party_name = {
			ideology = paternalism
			long_name = OMS_paternalism_batov_party_long
			name = OMS_paternalism_batov_party
		}
		promote_character = OMS_Batov_dummy
		add_dynamic_modifier = {
			modifier = OMS_batov_insurgency_dynomod
			scope = OMS
		}
		every_owned_state = {
			limit = {
				NOT = { state = 581 }
			}
			add_dynamic_modifier = { modifier = OMS_BI_state_dynomod }
		}
		add_ideas = OMS_batov_insurgency_dynmod_dummy
		tno_worsen_admin_efficiency = yes
		activate_mission = OMS_put_down_batovs_bandits
	}

	if = {
		limit = { has_country_flag = OMS_Lock_Regional }
		add_political_power = 150
	}
	
	clear_array = OMS_map_grid_array
	add_to_array = { OMS_map_grid_array = 754 }
	add_to_array = { OMS_map_grid_array = 653 }
	add_to_array = { OMS_map_grid_array = 573 }
	add_to_array = { OMS_map_grid_array = 572 }
	add_to_array = { OMS_map_grid_array = 580 }
	add_to_array = { OMS_map_grid_array = 403 }
	add_to_array = { OMS_map_grid_array = 571 }
	add_to_array = { OMS_map_grid_array = 871 }
	add_to_array = { OMS_map_grid_array = 863 }
	add_to_array = { OMS_map_grid_array = 756 }
	add_to_array = { OMS_map_grid_array = 844 }
	add_to_array = { OMS_map_grid_array = 579 }
	add_to_array = { OMS_map_grid_array = 845 }

	# Statuses: 1 (Nobody has a base in here), 2 (We have a base in here), 3 (Batov has a base in here)
	
	754 = { set_variable = { base_status = 3 } }
	653 = { set_variable = { base_status = 3 } }
	573 = { set_variable = { base_status = 3 } }
	572 = { set_variable = { base_status = 2 } }
	580 = { set_variable = { base_status = 1 } }
	403 = { set_variable = { base_status = 3 } }
	571 = { set_variable = { base_status = 2 } }
	871 = { set_variable = { base_status = 1 } }
	863 = { set_variable = { base_status = 3 } }
	756 = { set_variable = { base_status = 1 } }
	844 = { set_variable = { base_status = 1 } }
	579 = { set_variable = { base_status = 1 } }
	845 = { set_variable = { base_status = 1 } }
	
	clear_array = OMS_map_x
	clear_array = OMS_map_y
	add_to_array = { OMS_map_x = 76 }
	add_to_array = { OMS_map_x = 89 }
	add_to_array = { OMS_map_x = 44 }
	add_to_array = { OMS_map_x = 101 }
	add_to_array = { OMS_map_x = 160 }
	add_to_array = { OMS_map_x = 193 }
	add_to_array = { OMS_map_x = 295 }
	add_to_array = { OMS_map_x = 43 }
	add_to_array = { OMS_map_x = 3 }
	add_to_array = { OMS_map_x = 75 }
	add_to_array = { OMS_map_x = 191 }
	add_to_array = { OMS_map_x = 215 }
	add_to_array = { OMS_map_x = 83 }
	
	add_to_array = { OMS_map_y = 443 }
	add_to_array = { OMS_map_y = 297 }
	add_to_array = { OMS_map_y = 350 }
	add_to_array = { OMS_map_y = 385 }
	add_to_array = { OMS_map_y = 204 }
	add_to_array = { OMS_map_y = 284 }
	add_to_array = { OMS_map_y = 333 }
	add_to_array = { OMS_map_y = 216 }
	add_to_array = { OMS_map_y = 3 }
	add_to_array = { OMS_map_y = 47 }
	add_to_array = { OMS_map_y = 35 }
	add_to_array = { OMS_map_y = 36 }
	add_to_array = { OMS_map_y = 194 }
	for_each_loop = {
		array = OMS_map_grid_array
		if = {
			limit = {
				check_variable = { v:base_status = 1 }
			}
			var:v = {
				set_variable = { insurgency_strength = 0.45 }
			}
		}
		else_if = {
			limit = {
				check_variable = { v:base_status = 2 }
			}
			var:v = {
				set_variable = { insurgency_strength = 0.25 }
			}
		}
		else_if = {
			limit = {
				check_variable = { v:base_status = 3 }
			}
			var:v = {
				set_variable = { insurgency_strength = 1 }
			}
		}
	}

	hidden_effect = { country_event = { id = omsk.1999 days = 7 } }

	OMS_SE_insurgency_calc_insurgency_strength = yes

	set_variable = { insurgency_state_selected = 754 }
}

OMS_SE_insurgency_calc_insurgency_strength = {
	hidden_effect = {
		set_variable = { insurgency_strength = 0 }
		set_variable = { active_state = 0 }
		every_owned_state = {
			limit = { has_variable = insurgency_strength }
			clamp_variable = { var = insurgency_strength min = 0 max = 1 }
			add_to_variable = { ROOT.insurgency_strength = insurgency_strength }
			add_to_variable = { ROOT.active_states = 1 } # for debug purposes
		}
		log = "OMS_map_grid_array^num: [?OMS_map_grid_array^num]"

		divide_variable = { insurgency_strength = 13 }
		OMS_calculate_dynmod_effects = yes
		multiply_variable = { insurgency_strength = 100 }
		
		log = "[?insurgency_strength]"
		
		# Count how many bases yazov and batov have
		set_variable = { OMSK_YAZOV_COUNTER_INSURGENCY_BASES_NUMBER = 0 }
		set_variable = { BATOV_INSURGENCY_BASES_NUMBER = 0 }
		for_each_loop = {
			array = OMS_map_grid_array
			if = {
				limit = {
					check_variable = { v:base_status = 2 }
				}
				add_to_variable = { OMSK_YAZOV_COUNTER_INSURGENCY_BASES_NUMBER = 1 }
			}
			else_if = {
				limit = {
					check_variable = { v:base_status = 3 }
				}
				add_to_variable = { BATOV_INSURGENCY_BASES_NUMBER = 1 }
			}
		}
		
		add_to_variable = { insurgency_controller = 1 }
	}
}

OMS_calculate_dynmod_effects = {
	# Country scope dynmods
	clear_array = OMS_ins_dynomod_array
	add_to_array = { OMS_ins_dynomod_array = 0.2 } # Resistance Target
	add_to_array = { OMS_ins_dynomod_array = 0.3 } # Supply consumption factor
	add_to_array = { OMS_ins_dynomod_array = -0.2 } # Resource gain efficiency
	add_to_array = { OMS_ins_dynomod_array = -0.3 } # Stability
	add_to_array = { OMS_ins_dynomod_array = -5 } # GDP growth
	add_to_array = { OMS_ins_dynomod_array = 0.2 } # Misc military costs
	for_each_loop = {
		array = OMS_ins_dynomod_array
		multiply_variable = { OMS_ins_dynomod_array^i = insurgency_strength }
	}
	
	# State scope dynmods
	every_owned_state = {
		limit = {
			NOT = { state = 581 }
		}
		set_temp_variable = { temp_state_strength = insurgency_strength }
		ROOT = { log = "temp_state_strength = [?temp_state_strength]" }
		clear_array = OMS_state_dynomod_array
		add_to_array = { OMS_state_dynomod_array = -0.05 } # Local manpower
		add_to_array = { OMS_state_dynomod_array = -0.2 } # Local supplies
		add_to_array = { OMS_state_dynomod_array = -0.15 } # Recruitable pop factor
		add_to_array = { OMS_state_dynomod_array = -0.2 } # Local construction speed
		for_each_loop = {
			array = OMS_state_dynomod_array
			multiply_variable = { OMS_state_dynomod_array^i = temp_state_strength }
		}
	}
	
	force_update_dynamic_modifier = yes
}

OMS_insurgency_ai_move_effect = {
	if = { # Prioritize filling up empty spaces
		limit = {
			any_owned_state = {
				check_variable = { base_status = 1 }
				OMS_has_neighboring_enemy_base = yes
				NOT = {
					has_state_flag = OMS_insurgency_purge
					state = var:ROOT.OMS_map_grid_array^ROOT.OMS_acted_upon_build_i
				}
			}
		}
		random_owned_state = {
			limit = {
				check_variable = { base_status = 1 }
				OMS_has_neighboring_enemy_base = yes
				NOT = { has_state_flag = OMS_insurgency_purged }
			}
			set_variable = { base_status = 3 }
		}
	}
	else = { # Attacks a base of us
		random_owned_state = {
			limit = {
				check_variable = { base_status = 2 }
				OMS_has_neighboring_enemy_base = yes
				NOT = {
					has_state_flag = OMS_insurgency_purged
					state = var:ROOT.OMS_map_grid_array^ROOT.OMS_acted_upon_build_i
				}
			}
			set_variable = { base_status = 1 }
		}
		add_to_variable = { AVAILABLE_BASES = 1 }
	}
	OMS_SE_insurgency_calc_insurgency_strength = yes
}

OMS_build_a_base_here = {
	custom_effect_tooltip = OMS_build_base_tt
	var:OMS_map_grid_array^OMS_acted_upon_build_i = {
		set_variable = { base_status = 2 }
	}
	subtract_from_variable = { AVAILABLE_BASES = 1 }
	hidden_effect = {
		OMS_SE_insurgency_calc_insurgency_strength = yes
	}
	clear_variable = OMS_acted_upon_build_i
}

OMS_dismantle_base_here = {
	custom_effect_tooltip = OMS_dismantle_base_tt
	var:OMS_map_grid_array^OMS_acted_upon_dismantle_i = {
		set_variable = { base_status = 1 }
	}
	add_to_variable = { AVAILABLE_BASES = 1 }
	hidden_effect = {
		OMS_SE_insurgency_calc_insurgency_strength = yes
	}
	clear_variable = OMS_acted_upon_dismantle_i
}

OMS_attack_enemy_base = {
	custom_effect_tooltip = OMS_attack_enemy_base_tt
	var:OMS_map_grid_array^OMS_acted_upon_attack_i = {
		set_variable = { base_status = 1 }
	}
	hidden_effect = {
		OMS_SE_insurgency_calc_insurgency_strength = yes
	}
	clear_variable = OMS_acted_upon_attack_i
}

OMS_purge_state = {
	custom_effect_tooltip = OMS_purge_state_tt
	add_to_variable = { insurgency_strength = -0.4 }
	ROOT = { OMS_SE_insurgency_calc_insurgency_strength = yes }
}

OMS_SE_insurgency_batov_defects = {
		hidden_effect = {
			for_each_loop = {
				array = OMS_map_grid_array
				if = {
					limit = {
						check_variable = { v:base_status = 3 }
					}
					WSR = {
						division_template = {
							name = "Povstancheskaya Divizia"
							priority = 1
							regiments = {
								light_infantry = { x = 0 y = 0 }
								light_infantry = { x = 0 y = 1 }
								light_infantry = { x = 0 y = 2 }
								light_infantry = { x = 1 y = 0 }
								light_infantry = { X = 1 y = 1 }
								light_infantry = { X = 1 y = 2 }
							}
						}
						transfer_state = v
						every_owned_state = {
							limit = { is_west_siberia_state = yes }
							create_unit = {
								division = "division_template = \"Povstancheskaya Divizia\" start_experience_factor = 0.8 start_equipment_factor = 0.3"
								owner = WSR
							}
						}
					}
				}
			}
		}
		if = {
			limit = { #Spetsgruppa V is encircled
				863 = { check_variable = { THIS.base_status = 3 } }
				871 = { check_variable = { THIS.base_status = 3 } }
				756 = { check_variable = { THIS.base_status = 3 } }
				844 = { check_variable = { THIS.base_status = 3 } }
				has_completed_focus = OMS_spetsgruppa_v
			}
			division_template = {
				name = "Spetsgruppa V"
				division_names_group = OMS_Spetsgruppa_V
				priority = 1
				regiments = {
					MBT = { x = 0 y = 0 }
					MBT = { x = 0 y = 1 }
					MBT = { x = 0 y = 2 }
					MBT = { x = 0 y = 3 }
					MBT = { x = 0 y = 4 }
					MBT = { x = 1 y = 0 }
					MBT = { x = 1 y = 1 }
					MBT = { x = 1 y = 2 }
					MBT = { x = 1 y = 3 }
					MBT = { x = 1 y = 4 }
					APC = { x = 2 y = 0 }
					APC = { x = 2 y = 1 }
					APC = { x = 2 y = 2 }
					APC = { x = 2 y = 3 }
					APC = { x = 2 y = 4 }
					APC = { x = 3 y = 0 }
					APC = { x = 3 y = 1 }
					APC = { x = 3 y = 2 }
					APC = { x = 3 y = 3 }
					APC = { x = 3 y = 4 }
				}
				support = {	
					engineer = { x = 0 y = 0 }	
					air_assault = { x = 0 y = 1 }	
					transport_helicopter_company = { x = 0 y = 2 }	
					transport_helicopter_supply_company = { x = 0 y = 3 }	
				}
			}

			hidden_effect = {
				581 = {
					create_unit = {
						division = "division_template = \"Spetsgruppa V\" start_experience_factor = 1 start_equipment_factor = 1"
						owner = OMS
					}
					create_unit = {
						division = "division_template = \"Spetsgruppa V\" start_experience_factor = 1 start_equipment_factor = 1"
						owner = OMS
					}
				}
			}
			custom_effect_tooltip = OMS_spetsgruppa_v_spawn_tt
		}
		add_to_variable = { insurgency_controller = 1 }
		clr_country_flag = OMS_batov_insurgency_active
		hidden_effect = {
			clr_country_flag = OMS_batov_insurgency_flag
			remove_mission = OMS_put_down_batovs_bandits
			remove_mission = OMS_batov_making_moves
			remove_decision = OMS_acquire_more_bases
			remove_decision = OMS_build_base
			remove_decision = OMS_dismantle_own_base
			remove_decision = OMS_attack_enemy_base
			remove_decision = OMS_rally_people_against_batov
			remove_decision = OMS_intensify_operations
			every_owned_state = {
				limit = {
					NOT = { state = 581 }
				}
				remove_dynamic_modifier = { modifier = OMS_BI_state_dynomod }
			}
			WSR = {
				every_owned_state = {
					limit = {
						NOT = { state = 581 }
					}
					remove_dynamic_modifier = { modifier = OMS_BI_state_dynomod }
				}
			}
			remove_ideas = OMS_batov_insurgency_dynmod_dummy
		}
}

OMS_mission_test = {
	OMS = {
		remove_mission = WSR_weaken_counterinsurgency_i_batov
		remove_mission = WSR_weaken_counterinsurgency_iii_batov
	}
}

# |====| OLD CODE, DON'T REMOVE YET |====| #

batov_insurgency_decrease = {
	if = {
		limit = {
			has_idea = OMS_batov_insurgency
		}
		swap_ideas = {
			remove_idea = OMS_batov_insurgency
			add_idea = OMS_batov_insurgency_2
		}
	}
	else_if = {
		limit = {
			has_idea = OMS_batov_insurgency_2
		}
		swap_ideas = {
			remove_idea = OMS_batov_insurgency_2
			add_idea = OMS_batov_insurgency_3
		}
	}
	else_if = {
		limit = {
			has_idea = OMS_batov_insurgency_3
		}
		swap_ideas = {
			remove_idea = OMS_batov_insurgency_3
			add_idea = OMS_batov_insurgency_4
		}
	}
	else_if = {
		limit = {
			has_idea = OMS_batov_insurgency_4
		}
		swap_ideas = {
			remove_idea = OMS_batov_insurgency_4
			add_idea = OMS_batov_insurgency_5
		}
	}
	else_if = {
		limit = {
			has_idea = OMS_batov_insurgency_5
		}
		remove_ideas = OMS_batov_insurgency_5
	}
}

batov_insurgency_remove = {
	if = {
		limit = {
			has_idea = OMS_batov_insurgency
		}
		remove_ideas = OMS_batov_insurgency
	}
	else_if = {
		limit = {
			has_idea = OMS_batov_insurgency_2
		}
		remove_ideas = OMS_batov_insurgency_2
	}
	else_if = {
		limit = {
			has_idea = OMS_batov_insurgency_3
		}
		remove_ideas = OMS_batov_insurgency_3
	}
	else_if = {
		limit = {
			has_idea = OMS_batov_insurgency_4
		}
		remove_ideas = OMS_batov_insurgency_4
	}
	else_if = {
		limit = {
			has_idea = OMS_batov_insurgency_5
		}
		remove_ideas = OMS_batov_insurgency_5
	}
}